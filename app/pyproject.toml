[tool.poetry]
name = "app"
version = "0.1.0"
description = ""
authors = ["Andrey K <andrey0kozyrev0@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
asgiref = "3.8.1"
astroid = "2.15.8"
attrs = "23.2.0"
autopep8 = "2.2.0"
beautifulsoup4 = "4.12.3"
black = "24.4.2"
bleach = "6.1.0"
click = "8.1.7"
coreapi = "2.3.3"
dadata = "21.10.1"
django = "5.0.6"
django-cors-headers = "4.3.1"
django-environ = "0.11.2"
django-filter = "24.2"
django-nested-admin = "4.0.2"
django-parler = "2.3"
django-parler-rest = "2.2"
django-simple-history = "3.7.0"
django-spaghetti-and-meatballs = "0.4.2"
django-stubs = "5.0.2"
djangorestframework = "3.15.2"
djangorestframework-stubs = "3.15.0"
drf-jwt = "1.19.2"
drf-nested-routers = "0.94.1"
drf-writable-nested = "0.7.0"
drf-yasg = "1.21.7"
flake8 = "6.1.0"
flake8-bugbear = "24.4.26"
flake8-cognitive-complexity = "0.1.0"
flake8-django = "1.4"
flake8-multiline-containers = "0.0.19"
flake8-mutable = "1.2.0"
flake8-pie = "0.16.0"
flake8-print = "5.0.0"
flake8-pytest = "1.4"
flake8-pytest-style = "2.0.0"
flake8-variables-names = "0.0.6"
flake8-simplify = "0.21.0"
google-api-python-client = "2.133.0"
google-auth-httplib2 = "0.2.0"
google-auth-oauthlib = "1.2.0"
gunicorn = "22.0.0"
html2text = "2024.2.26"
iniconfig = "2.0.0"
isort = "5.13.2"
lazy-object-proxy = "1.10.0"
markdown = "3.6"
mccabe = "0.7.0"
mixer = "7.2.2"
mypy = "1.10.0"
openpyxl = "3.1.4"
packaging = "24.1"
pandas = "2.2.2"
pep8-naming = "0.14.1"
pexpect = "4.9.0"
pluggy = "1.5.0"
psycopg2-binary = "2.9.9"
pur = "7.3.2"
py = "1.11.0"
pycodestyle = "2.11.0"
pygsheets = "2.0.6"
pylint = "2.17.7"
pyparsing = "3.1.2"
pytest = "7.4.4"
pytest-django = "4.8.0"
pytest-drf = "1.1.3"
pytest-mock = "3.14.0"
pytest-randomly = "3.15"
pytest-xdist = "3.6.1"
pytz = "2024.1"
redbox = "0.2.1"
sentry-sdk = "2.6.0"
six = "1.16.0"
soupsieve = "2.5"
sqlparse = "0.5.0"
toml = "0.10.2"
unidecode = "1.3.8"
webencodings = "0.5.1"
whitenoise = "6.6.0"
wrapt = "1.16.0"
xlrd = "2.0.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "migrations"
]

target-version = "py311"

line-length = 120

[tool.ruff.format]
# Prefer single quotes over double quotes.
quote-style = "single"

[tool.ruff.lint]
ignore = [
    "A001",  # variable `{}` is shadowing a Python builtin
    "A002",  # argument `{}` is shadowing a Python builtin
    "A003",  # class attribute `{}` is shadowing a Python builtin
    "ANN101",  # missing type annotation for `self` in method
    "ANN102",  # missing type annotation for `cls` in classmethod
    "ANN401",  # dynamically typed expressions (typing.Any) are disallowed in `{}`
    "ARG002",  # unused method argument: `{}`
    "ARG005",  # unused lambda argument: `{}`
    "B018",  # found useless expression. Either assign it to a variable or remove it
    "B904",  # within an `except` clause, raise exceptions with [...]
    "B904",  # use `raise from` to specify exception cause
    "C408",  # unnecessary `dict` call (rewrite as a literal)
    "COM812",  # trailing comma missing
    "COM819",  # trailing comma prohibited
    "D100",  # missing docstring in public module
    "D101",  # missing docstring in public class
    "D102",  # missing docstring in public method
    "D103",  # missing docstring in public function
    "D104",  # missing docstring in public package
    "D105",  # missing docstring in magic method
    "D106",  # missing docstring in public nested class
    "D107",  # missing docstring in `__init__`
    "D200",  # one-line docstring should fit on one line
    "D202",  # no blank lines allowed after function docstring (found {})
    "D203",  # 1 blank line required before class docstring
    "D205",  # 1 blank line required between summary line and description
    "D209",  # multi-line docstring closing quotes should be on a separate line
    "D210",  # no whitespaces allowed surrounding docstring text
    "D212",  # multi-line docstring summary should start at the first line
    "D213",  # multi-line docstring summary should start at the second line
    "D400",  # first line should end with a period
    "D401",  # first line of docstring should be in imperative mood: "{}"
    "D404",  # first word of the docstring should not be "This"
    "D415",  # first line should end with a period, question mark, or exclamation point
    "DJ001", # Avoid using `null=True` on string-based fields such as `CharField`
    "DJ007",  # do not use `__all__` with `ModelForm`, use `fields` instead
    "DTZ001",  # the use of `datetime.datetime()` without `tzinfo` argument is not allowed
    "E501",  # line too long ({} > {})
    "EM101",  # exception must not use a string literal, assign to variable first
    "EM102",  # expection must not use an f-string literal, assign to variable first
    "F811",  # redefinition of unused `{}` from line {}
    "FBT001",  # boolean-typed position argument in function definition
    "FBT002",  # boolean default position argument in function definition
    "FBT003",  # boolean positional value in function call
    "INP001",  # file `{}` is part of an implicit namespace package. Add an `__init__.py`
    "INT001",  # f-string is resolved before function call; consider `_("string %s") % arg`
    "ISC001",  # implicitly concatenated string literals on one line
    "N802",  # function name `{}` should be lowercase
    "N803",  # argument name `{}` should be lowercase
    "N804",  # first argument of a class method should be named `cls`
    "N806",  # variable `{}` in function should be lowercase
    "N812",  # lowercase `{}` imported as non-lowercase `{}`
    "N818",  # exception name `{}` should be named with an Error suffix
    "N999",  # invalid module name: '{}'
    "PERF401",  # use a list comprehension to create a transformed list
    "PGH003",  # use specific rule codes when ignoring type issues
    "PGH004",  # use specific rule codes when using `noqa`
    "PLR0913",  # too many arguments in function definition ({} > {})
    "PLR2004",  # magic value used in comparison, consider replacing {} with constant variable
    "PLR5501",  # use `elif` instead of `else` then `if` to reduce indentation
    "PLW0603",  # using the global statement to update `{}` is discouraged
    "PLW2901",  # `for` loop variable `{}` overwritten by assignment target
    "PT001",  # use `@pytest.fixture()` over `@pytest.fixture`
    "PT006",  # wrong name(s) type in `@pytest.mark.parametrize`, expected `{}`
    "PTH118",  # `os.path.join()` should be replaced by `Path` with `/` operator
    "PTH119",  # `os.path.basename()` should be replaced by `Path.name`
    "PTH120",  # `os.path.dirname()` should be replaced by `Path.parent`
    "PTH122",  # `os.path.splitext()` should be replaced by `Path.suffix`, [...]
    "PTH123",  # `open()` should be replaced by `Path.open()`
    "RET501",  # do not explicitly `return None` in function if it is the only possible return value
    "RET502",  # do not implicitly `return None` in function able to return non-`None` value
    "RET503",  # missing explicit `return` at the end of function able to return non-`None` value
    "RET504",  # unnecessary assignment to `{}` before `return` statement
    "RET505",  # unnecessary `else` after `return` statement
    "RSE102",  # unnecessary parentheses on raised exception
    "RUF001",  # string contains ambiguous `{}` [...]
    "RUF002",  # docstring contains ambiguous `{}` [...]
    "RUF005",  # consider iterable unpacking instead of concatenation"
    "RUF009",  # do not perform function call `{}` in dataclass defaults
    "RUF012",  # mutable class attributes should be annotated with `typing.ClassVar`
    "RUF015",  # prefer next({iterable}) over single element slice
    "RUF100",  # unused `noqa` directive (unknown: `{}`)
    "S101",  # use of `assert` detected
    "S105",  # possible hardcoded password assigned to: "{}"
    "S105",  # possible hardcoded password assigned to: "{}"
    "S106",  # possible hardcoded password assigned to argument: "{}"
    "S308",  # use of `mark_safe` may expose cross-site scripting vulnerabilities
    "S311",  # standart pseudo-random generators are not suitable for cryptographic purposes
    "S324",  # probable use of insecure hash functions in `{}`: `{}`
    "SIM102",  # use a single `if` statement instead of nested `if` statements
    "SIM108",  # use ternary operator `{}` instead of `if`-`else`-block
    "SIM300",  # yoda conditions are discouraged, use `{}` instead
    "SLF001",  # private member accessed: `{}`
    "TCH001",  # move application import `{}` into a type-checking block
    "TCH002",  # move third-party import `{}` into a type-checking block
    "TCH003",  # move standart library import `{}` into a type-checking block
    "TRY003",  # avoid specifying long messages outside the exception class
    "TRY300",  # consider moving this statement to an `else` block
    "UP006",  # use `{}` instead of `{}` for type annotation
    "UP015",  # unnecessary open mode parameters
    "UP017",  # use `datetime.UTC` alias
    "UP035",  # `{}` is deprecated, use `{}` instead
    "T201", # `print` found
    "T203" # `pprint` found
]
select = ["ALL"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.per-file-ignores]
"*/management/*" = [
    "ANN",  # flake8-annotations
]
"*/migrations/*" = [
    "ANN",  # flake8-annotations
]
"*/tests/*" = [
    "ANN",  # flake8-annotations
]
